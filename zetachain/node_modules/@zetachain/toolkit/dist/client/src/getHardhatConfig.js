"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getHardhatConfig = void 0;
const networks_1 = require("@zetachain/networks");
const getHardhatConfig = function ({ accounts }) {
    const hardhat = {
        chainId: 1337,
        forking: { blockNumber: 14672712, url: "https://rpc.ankr.com/eth" },
    };
    const config = {};
    for (const network in networks_1.networks) {
        if (!networks_1.networks[network].fees)
            continue;
        let apiUrls = networks_1.networks[network].api;
        let evmApi = apiUrls?.find((api) => api.type === "evm");
        if (!accounts) {
            throw new Error("Seems like the client has been initialized without a wallet.");
        }
        config[network] = {
            chainId: networks_1.networks[network].chain_id,
            gas: networks_1.networks[network].fees.assets[0].gas,
            gasPrice: networks_1.networks[network].fees.assets[0].gas_price,
            url: evmApi?.url || "",
        };
        if (accounts.every((e) => e))
            config[network].accounts = accounts;
    }
    const etherscan = {
        apiKey: {
            zeta_mainnet: "YOUR_KEY_HERE",
            zeta_testnet: "YOUR_KEY_HERE",
        },
        customChains: [
            {
                chainId: 7001,
                network: "zeta_testnet",
                urls: {
                    apiURL: "https://zetachain-athens-3.blockscout.com/api",
                    browserURL: "https://zetachain-athens-3.blockscout.com",
                },
            },
            {
                chainId: 7000,
                network: "zeta_mainnet",
                urls: {
                    apiURL: "https://zetachain.blockscout.com/api",
                    browserURL: "https://zetachain.blockscout.com",
                },
            },
        ],
    };
    return {
        etherscan,
        networks: { ...config, hardhat },
        solidity: "0.8.7",
    };
};
exports.getHardhatConfig = getHardhatConfig;
