"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withdraw = void 0;
const ZRC20_json_1 = __importDefault(require("@zetachain/protocol-contracts/abi/zevm/ZRC20.sol/ZRC20.json"));
const ethers_1 = require("ethers");
/**
 * Initiates a withdraw transaction of a ZRC-20 token from ZetaChain to a
 * connected chain as a native gas or ERC-20 token.
 *
 * @param this - ZetaChainClient instance.
 * @param options - Withdrawal options.
 * @param options.amount - Amount to be withdrawn in human readable form.
 * @param options.zrc20 - ZRC-20 token contract address.
 * @param options.recipient - Recipient address for the withdrawal. If not provided,
 * the withdrawal is made to the signer's address.
 *
 * @returns A promise that resolves with the transaction details upon success.
 */
const withdraw = async function ({ amount, zrc20, recipient, }) {
    let signer;
    if (this.signer) {
        signer = this.signer;
    }
    else if (this.wallet) {
        const chain = `zeta_${this.network}`;
        const rpc = this.getEndpoint("evm", chain);
        if (!rpc)
            throw new Error(`No EVM RPC endpoint found for ${chain} chain.`);
        const provider = new ethers_1.ethers.providers.JsonRpcProvider(rpc);
        signer = this.wallet.connect(provider);
    }
    else {
        throw new Error("No wallet or signer found.");
    }
    const targetContract = new ethers_1.ethers.Contract(zrc20, ZRC20_json_1.default.abi, signer);
    const targetDecimals = await targetContract.decimals();
    const [gasAddress, gasFee] = await targetContract.withdrawGasFee();
    const gasContract = new ethers_1.ethers.Contract(gasAddress, ZRC20_json_1.default.abi, signer);
    const value = ethers_1.ethers.utils.parseUnits(amount, targetDecimals);
    await (await gasContract.connect(signer).approve(zrc20, gasFee)).wait();
    const to = recipient ? recipient : signer.address;
    return await targetContract.connect(signer).withdraw(to, value);
};
exports.withdraw = withdraw;
