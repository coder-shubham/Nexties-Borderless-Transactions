"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZetaChainClient = void 0;
const networks_1 = require("@zetachain/networks");
const merge_1 = __importDefault(require("lodash/merge"));
const _1 = require(".");
class ZetaChainClient {
    /**
     * Initializes ZetaChainClient instance.
     *
     * ```ts
     * new ZetaChainClient({
     *   network: "testnet"
     * })
     * ```
     *
     * With an Ethers.js wallet:
     *
     * ```ts
     * const client = new ZetaChainClient({
     *   network: "testnet",
     *   wallet: ethers.Wallet.fromMnemonic(process.env.MNEMONIC as string),
     * });
     * ```
     *
     * With a signer:
     *
     * ```ts
     * const client = new ZetaChainClient({
     *   network: "testnet",
     *   signer: await ethers.getSigners(),
     * });
     * ```
     *
     * Use a custom RPC endpoint for ZetaChain or any connected chain:
     *
     * ```ts
     * const client = new ZetaChainClient({
     *   network: "testnet",
     *   chains: {
     *     zeta_testnet: {
     *       api: {
     *         url: "https://zetachain-testnet-archive.allthatnode.com:8545/${process.env.KEY}",
     *         type: "evm",
     *       },
     *     },
     *   },
     * });
     * ```
     *
     * @param params
     */
    constructor(params) {
        this.getEndpoint = _1.getEndpoint;
        this.getBalances = _1.getBalances;
        this.getForeignCoins = _1.getForeignCoins;
        this.getSupportedChains = _1.getSupportedChains;
        this.getFees = _1.getFees;
        this.getPools = _1.getPools;
        this.trackCCTX = _1.trackCCTX;
        this.deposit = _1.deposit;
        this.withdraw = _1.withdraw;
        this.sendZeta = _1.sendZeta;
        this.getChainId = _1.getChainId;
        if (params.wallet && params.signer) {
            throw new Error("You can only provide a wallet or a signer, not both.");
        }
        else if (params.wallet) {
            this.wallet = params.wallet;
        }
        else if (params.signer) {
            this.signer = params.signer;
        }
        this.chains = { ...networks_1.networks };
        this.network = params.network || "";
        this.mergeChains(params.chains);
    }
    mergeChains(customChains = {}) {
        Object.entries(customChains).forEach(([key, value]) => {
            if (customChains.hasOwnProperty(key)) {
                this.chains[key] = (0, merge_1.default)({}, this.chains[key], value);
            }
        });
    }
    getChains() {
        return this.chains;
    }
}
exports.ZetaChainClient = ZetaChainClient;
