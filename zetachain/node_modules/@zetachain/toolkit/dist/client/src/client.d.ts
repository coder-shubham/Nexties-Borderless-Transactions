import type { Signer, Wallet } from "ethers";
export interface ZetaChainClientParamsBase {
    chains?: {
        [key: string]: any;
    };
    network?: string;
}
export type ZetaChainClientParams = ZetaChainClientParamsBase & ({
    signer: Signer;
    wallet?: never;
} | {
    signer?: never;
    wallet: Wallet;
} | {
    signer?: undefined;
    wallet?: undefined;
});
export declare class ZetaChainClient {
    chains: {
        [key: string]: any;
    };
    network: string;
    wallet: Wallet | undefined;
    signer: any | undefined;
    /**
     * Initializes ZetaChainClient instance.
     *
     * ```ts
     * new ZetaChainClient({
     *   network: "testnet"
     * })
     * ```
     *
     * With an Ethers.js wallet:
     *
     * ```ts
     * const client = new ZetaChainClient({
     *   network: "testnet",
     *   wallet: ethers.Wallet.fromMnemonic(process.env.MNEMONIC as string),
     * });
     * ```
     *
     * With a signer:
     *
     * ```ts
     * const client = new ZetaChainClient({
     *   network: "testnet",
     *   signer: await ethers.getSigners(),
     * });
     * ```
     *
     * Use a custom RPC endpoint for ZetaChain or any connected chain:
     *
     * ```ts
     * const client = new ZetaChainClient({
     *   network: "testnet",
     *   chains: {
     *     zeta_testnet: {
     *       api: {
     *         url: "https://zetachain-testnet-archive.allthatnode.com:8545/${process.env.KEY}",
     *         type: "evm",
     *       },
     *     },
     *   },
     * });
     * ```
     *
     * @param params
     */
    constructor(params: ZetaChainClientParams);
    private mergeChains;
    getChains(): {
        [key: string]: any;
    };
    getEndpoint: (this: ZetaChainClient, type: any, network: any) => any;
    getBalances: (this: ZetaChainClient, { evmAddress, btcAddress }: {
        btcAddress?: string | undefined;
        evmAddress: string;
    }) => Promise<import("./getBalances").TokenBalance[]>;
    getForeignCoins: (this: ZetaChainClient) => Promise<any>;
    getSupportedChains: (this: ZetaChainClient) => Promise<any>;
    getFees: (this: ZetaChainClient, gas: Number) => Promise<{
        messaging: {
            [key: string]: string;
        }[];
        omnichain: {
            [key: string]: string;
        }[];
    }>;
    getPools: (this: ZetaChainClient) => Promise<any[]>;
    trackCCTX: (this: ZetaChainClient, { hash, json, emitter, }: {
        emitter: any;
        hash: string;
        json: Boolean;
    }) => Promise<void>;
    deposit: (this: ZetaChainClient, { chain, amount, recipient, erc20, message, }: {
        amount: string;
        chain: string;
        erc20?: string | undefined;
        message?: [string[], string[]] | undefined;
        recipient?: string | undefined;
    }) => Promise<any>;
    withdraw: (this: ZetaChainClient, { amount, zrc20, recipient, }: {
        amount: string;
        recipient?: string | undefined;
        zrc20: string;
    }) => Promise<any>;
    sendZeta: (this: ZetaChainClient, { chain, destination, recipient, gasLimit, amount, }: {
        amount: string;
        chain: string;
        destination: string;
        gasLimit?: Number | undefined;
        recipient: string;
    }) => Promise<any>;
    getChainId: (this: ZetaChainClient, chainNameOrAlias: string) => number | null;
}
