"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withdrawTask = void 0;
const confirm_1 = __importDefault(require("@inquirer/confirm"));
const config_1 = require("hardhat/config");
const src_1 = require("../../client/src");
const main = async (args, hre) => {
    const { ethers } = hre;
    const [signer] = await ethers.getSigners();
    if (!signer) {
        throw new Error("signer not found. Please, set the PRIVATE_KEY env variable.");
    }
    const client = new src_1.ZetaChainClient({ network: "testnet", signer });
    const recipient = args.recipient || signer.address;
    const amount = args.amount;
    const zrc20 = args.zrc20;
    await (0, confirm_1.default)({
        message: `Please, confirm the transaction`,
    }, { clearPromptOnDone: true });
    const tx = await client.withdraw({
        amount,
        recipient,
        zrc20,
    });
    console.log(`Transaction successfully broadcasted!
Hash: ${tx.hash}`);
};
exports.withdrawTask = (0, config_1.task)("withdraw", "Withdraw ZRC-20 from ZetaChain to a connected chain as native asset or ERC-20.", main)
    .addParam("amount", "Amount of ZRC-20 to withdraw")
    .addParam("zrc20", "ZRC-20 token address")
    .addOptionalParam("recipient", "Recipient address");
