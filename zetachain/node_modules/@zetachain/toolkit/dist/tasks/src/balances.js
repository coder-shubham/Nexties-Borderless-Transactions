"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.balancesTask = exports.walletError = void 0;
const dotenv = __importStar(require("dotenv"));
const ethers_1 = require("ethers");
const config_1 = require("hardhat/config");
const ora_1 = __importDefault(require("ora"));
const src_1 = require("../../client/src/");
const bitcoinAddress_1 = require("./bitcoinAddress");
dotenv.config();
exports.walletError = `
‚ùå Error: Wallet address not found.

To resolve this issue, please follow these steps:

* Set your PRIVATE_KEY environment variable. You can write
  it to a .env file in the root of your project like this:

  PRIVATE_KEY=123... (without the 0x prefix)
  
  Or you can generate a new private key by running:

  npx hardhat account --save
`;
const balancesError = `
* Alternatively, you can fetch the balance of any address
  by using the --address flag:
  
  npx hardhat balances --address <wallet_address>
`;
const main = async (args, hre) => {
    const client = new src_1.ZetaChainClient({
        network: args.mainnet ? "mainnet" : "testnet",
    });
    const spinner = (0, ora_1.default)("Fetching balances...");
    if (!args.json) {
        spinner.start();
    }
    const pk = process.env.PRIVATE_KEY;
    let evmAddress;
    let btcAddress;
    if (args.address) {
        evmAddress = args.address;
    }
    else if (pk) {
        evmAddress = new ethers_1.ethers.Wallet(pk).address;
        btcAddress = (0, bitcoinAddress_1.bitcoinAddress)(pk);
    }
    else {
        spinner.stop();
        console.error(exports.walletError + balancesError);
        return process.exit(1);
    }
    let balances = (await client.getBalances({
        btcAddress,
        evmAddress,
    }));
    if (args.json) {
        console.log(JSON.stringify(balances, null, 2));
    }
    else {
        spinner.stop();
        console.log(`
EVM: ${evmAddress} ${btcAddress ? `\nBitcoin: ${btcAddress}` : ""}
    `);
        balances = balances.sort((a, b) => {
            if (a?.chain_name === undefined && b?.chain_name === undefined)
                return 0;
            if (a?.chain_name === undefined)
                return 1;
            if (b?.chain_name === undefined)
                return -1;
            return a.chain_name.localeCompare(b.chain_name);
        });
        balances = balances.map((balance) => ({
            /* eslint-disable */
            Chain: balance.chain_name,
            Token: balance.symbol,
            Type: balance.coin_type,
            Amount: `${parseFloat(balance.balance).toFixed(6)}`,
            /* eslint-enable */
        }));
        console.table(balances);
    }
};
exports.balancesTask = (0, config_1.task)("balances", `Fetch native and ZETA token balances`, main)
    .addOptionalParam("address", `Fetch balances for a specific address`)
    .addFlag("json", "Output balances as JSON")
    .addFlag("mainnet", "Run the task on mainnet");
