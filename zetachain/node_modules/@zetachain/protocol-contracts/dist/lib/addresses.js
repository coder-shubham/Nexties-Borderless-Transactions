"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAddress = void 0;
const networks_1 = require("@zetachain/networks");
const addresses_mainnet_json_1 = __importDefault(require("../data/addresses.mainnet.json"));
const addresses_testnet_json_1 = __importDefault(require("../data/addresses.testnet.json"));
const getAddress = (type, network, symbol) => {
    const networks = [...addresses_testnet_json_1.default, ...addresses_mainnet_json_1.default];
    let address;
    if (type !== "zrc20" && symbol) {
        throw new Error("Symbol is only supported when ParamType is zrc20");
    }
    if (type === "zrc20" && !symbol) {
        // for backwards compatibility
        const chainId = (0, networks_1.getChainId)(network);
        address = networks.find((n) => {
            return n.foreign_chain_id === chainId?.toString() && n.type === type && n.coin_type === "gas";
        });
    }
    else {
        address = networks.find((n) => {
            return n.chain_name === network && n.type === type && n.symbol === symbol;
        });
    }
    return address?.address;
};
exports.getAddress = getAddress;
